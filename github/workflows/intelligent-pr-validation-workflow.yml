name: Intelligent PR Validation with AI
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop, master]
jobs:
  intelligent-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-intelligent-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-intelligent-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install graph-sitter codegen
          
          # Install project dependencies
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          if [ -f pyproject.toml ]; then
            pip install -e .
          fi
      - name: Download validation scripts
        run: |
          # Ensure validation scripts are available
          # (In real usage, these would be part of your repository)
          if [ ! -f pr_validator.py ]; then
            echo "⚠️  pr_validator.py not found in repository"
            exit 1
          fi
          
          if [ ! -f intelligent_pr_validator.py ]; then
            echo "⚠️  intelligent_pr_validator.py not found in repository"
            exit 1
          fi
      - name: Get PR context
        id: pr-context
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }})
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Count changes
          CHANGED_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "CHANGED_COUNT=$CHANGED_COUNT" >> $GITHUB_OUTPUT
          
          # Save changed files
          echo "CHANGED_FILES<> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Get PR info
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
          echo "PR_ADDITIONS=${{ github.event.pull_request.additions }}" >> $GITHUB_ENV
          echo "PR_DELETIONS=${{ github.event.pull_request.deletions }}" >> $GITHUB_ENV
      - name: Run Intelligent PR Validation
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          CODEGEN_ORG_ID: ${{ secrets.CODEGEN_ORG_ID }}
          CODEGEN_API_TOKEN: ${{ secrets.CODEGEN_API_TOKEN }}
        run: |
          echo "🧠 Running intelligent PR validation..."
          echo "📊 PR Context:"
          echo "  - Title: $PR_TITLE"
          echo "  - Author: $PR_AUTHOR"
          echo "  - Changes: +$PR_ADDITIONS/-$PR_DELETIONS"
          echo "  - Files: ${{ steps.pr-context.outputs.CHANGED_COUNT }}"
          echo ""
          
          # Run the intelligent validator
          python intelligent_pr_validator.py
      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: intelligent-validation-${{ github.event.pull_request.number }}
          path: |
            intelligent_validation_report.md
            intelligent_validation_result.json
            pr_validation_report.md
            pr_validation_result.json
          retention-days: 30
      - name: Parse validation results
        if: always()
        id: validation-results
        run: |
          # Parse validation results
          if [ -f intelligent_validation_result.json ]; then
            COMBINED_SCORE=$(python -c "import json; result = json.load(open('intelligent_validation_result.json')); print(result.get('combined_score', 0))")
            IS_VALID=$(python -c "import json; result = json.load(open('intelligent_validation_result.json')); print(result.get('is_valid', False))")
            ERROR_COUNT=$(python -c "import json; result = json.load(open('intelligent_validation_result.json')); print(result.get('structural_summary', {}).get('errors', 0))")
            WARNING_COUNT=$(python -c "import json; result = json.load(open('intelligent_validation_result.json')); print(result.get('structural_summary', {}).get('warnings', 0))")
            AI_STATUS=$(python -c "import json; result = json.load(open('intelligent_validation_result.json')); print(result.get('ai_status', 'not_available'))")
            
            echo "COMBINED_SCORE=$COMBINED_SCORE" >> $GITHUB_OUTPUT
            echo "IS_VALID=$IS_VALID" >> $GITHUB_OUTPUT
            echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "WARNING_COUNT=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "AI_STATUS=$AI_STATUS" >> $GITHUB_OUTPUT
          else
            echo "COMBINED_SCORE=0" >> $GITHUB_OUTPUT
            echo "IS_VALID=False" >> $GITHUB_OUTPUT
            echo "ERROR_COUNT=999" >> $GITHUB_OUTPUT
            echo "WARNING_COUNT=0" >> $GITHUB_OUTPUT
            echo "AI_STATUS=error" >> $GITHUB_OUTPUT
          fi
      - name: Comment validation results on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read validation report
            let report = '';
            try {
              report = fs.readFileSync('intelligent_validation_report.md', 'utf8');
            } catch (error) {
              report = '❌ **Intelligent Validation Failed**: Could not generate validation report.\n\nError: ' + error.message;
            }
            
            // Get validation scores
            const combinedScore = '${{ steps.validation-results.outputs.COMBINED_SCORE }}';
            const isValid = '${{ steps.validation-results.outputs.IS_VALID }}';
            const errorCount = '${{ steps.validation-results.outputs.ERROR_COUNT }}';
            const warningCount = '${{ steps.validation-results.outputs.WARNING_COUNT }}';
            const aiStatus = '${{ steps.validation-results.outputs.AI_STATUS }}';
            
            // Determine status emoji
            let statusEmoji = '❌';
            if (parseFloat(combinedScore) >= 90) statusEmoji = '✅';
            else if (parseFloat(combinedScore) >= 75) statusEmoji = '🟢';
            else if (parseFloat(combinedScore) >= 60) statusEmoji = '🟡';
            else statusEmoji = '🔴';
            
            // Create enhanced comment
            const commentBody = `## 🧠 Intelligent PR Validation Results ${statusEmoji}
**Combined Score: ${combinedScore}/100**
### Quick Summary
- **Structural Validation**: ${isValid === 'True' ? '✅ Passed' : '❌ Failed'}
- **Errors**: ${errorCount}
- **Warnings**: ${warningCount}
- **AI Analysis**: ${aiStatus === 'completed' ? '✅ Completed' : aiStatus === 'not_available' ? '⚠️ Not Available' : '❌ ' + aiStatus}
${report}
---
### 🔧 Next Steps
${parseFloat(combinedScore) >= 75 
  ? '✅ **Ready for Review**: This PR meets quality standards and is ready for human review.'
  : parseFloat(combinedScore) >= 60
    ? '🟡 **Needs Minor Improvements**: Address the recommendations above before merging.'
    : '🔴 **Requires Significant Changes**: Please fix the identified issues before proceeding.'
}
*Intelligent validation powered by graph-sitter + Codegen AI*
*Generated at: ${new Date().toISOString()}*`;
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
      - name: Set detailed PR status checks
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const combinedScore = parseFloat('${{ steps.validation-results.outputs.COMBINED_SCORE }}');
            const isValid = '${{ steps.validation-results.outputs.IS_VALID }}' === 'True';
            const errorCount = parseInt('${{ steps.validation-results.outputs.ERROR_COUNT }}');
            const warningCount = parseInt('${{ steps.validation-results.outputs.WARNING_COUNT }}');
            const aiStatus = '${{ steps.validation-results.outputs.AI_STATUS }}';
            
            const sha = '${{ github.event.pull_request.head.sha }}';
            const targetUrl = `${context.payload.pull_request.html_url}/checks`;
            
            // Overall status
            const overallState = combinedScore >= 75 ? 'success' : 'failure';
            const overallDescription = `Score: ${combinedScore}/100 | ${errorCount} errors, ${warningCount} warnings`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: overallState,
              target_url: targetUrl,
              description: overallDescription,
              context: 'Intelligent PR Validation'
            });
            
            // Structural validation status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: isValid ? 'success' : 'failure',
              target_url: targetUrl,
              description: `${errorCount} errors, ${warningCount} warnings`,
              context: 'Structural Validation'
            });
            
            // AI validation status
            const aiState = aiStatus === 'completed' ? 'success' : 
                           aiStatus === 'not_available' ? 'pending' : 'failure';
            const aiDescription = aiStatus === 'completed' ? 'AI analysis completed' :
                                 aiStatus === 'not_available' ? 'AI analysis not available' :
                                 `AI analysis ${aiStatus}`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: aiState,
              target_url: targetUrl,
              description: aiDescription,
              context: 'AI Validation'
            });
      - name: Add PR labels based on validation
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const combinedScore = parseFloat('${{ steps.validation-results.outputs.COMBINED_SCORE }}');
            const errorCount = parseInt('${{ steps.validation-results.outputs.ERROR_COUNT }}');
            
            const labelsToAdd = [];
            const labelsToRemove = ['validation-passed', 'validation-failed', 'needs-fixes', 'ready-for-review'];
            
            // Add labels based on score
            if (combinedScore >= 90) {
              labelsToAdd.push('validation-passed', 'ready-for-review');
            } else if (combinedScore >= 75) {
              labelsToAdd.push('validation-passed');
            } else if (combinedScore >= 60) {
              labelsToAdd.push('needs-minor-fixes');
            } else {
              labelsToAdd.push('validation-failed', 'needs-fixes');
            }
            
            // Add error-specific labels
            if (errorCount > 0) {
              labelsToAdd.push('has-errors');
            }
            
            // Remove old labels
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label
                });
              } catch (error) {
                // Label might not exist, ignore
              }
            }
            
            // Add new labels
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labelsToAdd
              });
            }
      - name: Determine final job status
        if: always()
        run: |
          COMBINED_SCORE="${{ steps.validation-results.outputs.COMBINED_SCORE }}"
          
          echo "🎯 Final Validation Results:"
          echo "  Combined Score: $COMBINED_SCORE/100"
          
          if (( $(echo "$COMBINED_SCORE >= 75" | bc -l) )); then
            echo "✅ Intelligent validation PASSED!"
            echo "   PR meets quality standards and is ready for review."
            exit 0
          elif (( $(echo "$COMBINED_SCORE >= 60" | bc -l) )); then
            echo "🟡 Intelligent validation PASSED with recommendations"
            echo "   PR has minor issues but can proceed with caution."
            exit 0
          else
            echo "❌ Intelligent validation FAILED"
            echo "   PR requires significant improvements before merging."
            exit 1
          fi
