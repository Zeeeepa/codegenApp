#!/usr/bin/env python3
"""
Simple PR Validator Script
Validates basic PR requirements and generates a report.
"""

import os
import json
import sys
from pathlib import Path

def main():
    """Main validation function."""
    print("üîç Running PR validation...")
    
    # Get environment variables
    workspace = os.getenv('GITHUB_WORKSPACE', '.')
    pr_number = os.getenv('GITHUB_PR_NUMBER', 'unknown')
    repository = os.getenv('GITHUB_REPOSITORY', 'unknown')
    sha = os.getenv('GITHUB_SHA', 'unknown')
    
    # Basic validation checks
    validation_results = {
        'pr_number': pr_number,
        'repository': repository,
        'sha': sha,
        'checks': [],
        'status': 'passed',
        'summary': 'Basic PR validation completed successfully'
    }
    
    # Check 1: Verify workspace exists
    if os.path.exists(workspace):
        validation_results['checks'].append({
            'name': 'Workspace Check',
            'status': 'passed',
            'message': f'Workspace found at {workspace}'
        })
    else:
        validation_results['checks'].append({
            'name': 'Workspace Check',
            'status': 'failed',
            'message': f'Workspace not found at {workspace}'
        })
        validation_results['status'] = 'failed'
    
    # Check 2: Look for common files
    common_files = ['README.md', 'package.json', 'setup.py']
    for file in common_files:
        file_path = os.path.join(workspace, file)
        if os.path.exists(file_path):
            validation_results['checks'].append({
                'name': f'{file} Check',
                'status': 'passed',
                'message': f'{file} found'
            })
        else:
            validation_results['checks'].append({
                'name': f'{file} Check',
                'status': 'info',
                'message': f'{file} not found (optional)'
            })
    
    # Check 3: Frontend directory structure
    frontend_dir = os.path.join(workspace, 'frontend')
    if os.path.exists(frontend_dir):
        validation_results['checks'].append({
            'name': 'Frontend Structure',
            'status': 'passed',
            'message': 'Frontend directory found'
        })
    else:
        validation_results['checks'].append({
            'name': 'Frontend Structure',
            'status': 'info',
            'message': 'Frontend directory not found'
        })
    
    # Check 4: Backend directory structure
    backend_dir = os.path.join(workspace, 'backend')
    if os.path.exists(backend_dir):
        validation_results['checks'].append({
            'name': 'Backend Structure',
            'status': 'passed',
            'message': 'Backend directory found'
        })
    else:
        validation_results['checks'].append({
            'name': 'Backend Structure',
            'status': 'info',
            'message': 'Backend directory not found'
        })
    
    # Generate report
    report_md = generate_markdown_report(validation_results)
    
    # Write results
    with open('pr_validation_result.json', 'w') as f:
        json.dump(validation_results, f, indent=2)
    
    with open('pr_validation_report.md', 'w') as f:
        f.write(report_md)
    
    print(f"‚úÖ Validation completed with status: {validation_results['status']}")
    print(f"üìä Total checks: {len(validation_results['checks'])}")
    
    # Exit with appropriate code
    if validation_results['status'] == 'failed':
        sys.exit(1)
    else:
        sys.exit(0)

def generate_markdown_report(results):
    """Generate a markdown report from validation results."""
    report = f"""# PR Validation Report

**PR Number:** {results['pr_number']}
**Repository:** {results['repository']}
**SHA:** {results['sha']}
**Status:** {results['status'].upper()}

## Summary
{results['summary']}

## Validation Checks

"""
    
    for check in results['checks']:
        status_emoji = {
            'passed': '‚úÖ',
            'failed': '‚ùå',
            'info': '‚ÑπÔ∏è'
        }.get(check['status'], '‚ùì')
        
        report += f"### {status_emoji} {check['name']}\n"
        report += f"**Status:** {check['status']}\n"
        report += f"**Message:** {check['message']}\n\n"
    
    report += "---\n*Generated by PR Validator*\n"
    
    return report

if __name__ == '__main__':
    main()

