# CodegenApp - AI-Powered Development Platform

A comprehensive web application for managing Codegen agent runs with integrated web evaluation and code analysis capabilities. This platform provides a unified interface for AI-powered software development, testing, and code analysis workflows.

## 🚀 Key Features

### Core Agent Management
- **Agent Run Management**: Create, monitor, and manage Codegen AI agent runs
- **Organization Support**: Multi-organization workspace management
- **Real-time Updates**: Live status updates and progress tracking
- **Credential Management**: Secure API token and authentication handling

### Web Evaluation Agent Integration
- **Automated UI Testing**: Evaluate web applications using AI-powered browser automation
- **GitHub PR Testing**: Automatically test pull request deployments
- **GitHub Branch Testing**: Continuous testing of branch deployments
- **Browser State Management**: Persistent authentication and session handling
- **Comprehensive Reporting**: Detailed evaluation reports with screenshots and metrics

### Code Analysis & Visualization
- **Interactive Code Structure**: Visual exploration of repository architecture using graph-sitter
- **Multi-language Support**: Analysis for Python, JavaScript, TypeScript, Go, Rust, Java, C++, and C
- **Real-time Analysis**: Live code structure updates and dependency mapping
- **Performance Insights**: Code complexity and maintainability metrics

### CI/CD Integration
- **Automated Testing Workflows**: GitHub Actions integration for PR testing
- **Deployment Validation**: Automatic evaluation of deployed applications
- **Quality Gates**: Configurable quality checks and approval workflows
- **Multi-environment Support**: Testing across development, staging, and production

## 🏗️ System Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────────┐
│   Frontend      │    │   Proxy Server   │    │   External APIs     │
│   (React/TS)    │◄──►│   (Node.js)      │◄──►│   - Codegen API     │
│                 │    │                  │    │   - GitHub API      │
│   - Agent UI    │    │   - API Proxy    │    │   - Deployment APIs │
│   - Web Eval    │    │   - Web Eval     │    └─────────────────────┘
│   - Code Viz    │    │   - Auth         │              │
└─────────────────┘    └──────────────────┘              │
                                │                        │
                                ▼                        ▼
                    ┌──────────────────┐    ┌─────────────────────┐
                    │   Web-Eval-Agent │    │   Graph-Sitter      │
                    │   (MCP Server)   │    │   (Code Analysis)   │
                    │                  │    │                     │
                    │   - Playwright   │    │   - Tree-sitter     │
                    │   - GitHub Integ │    │   - AST Analysis    │
                    │   - AI Evaluation│    │   - Dependency Map  │
                    └──────────────────┘    └─────────────────────┘
```

### Component Overview

1. **Frontend Layer**: React/TypeScript application with responsive UI components
2. **Proxy Server**: Node.js middleware handling API routing and authentication
3. **Web-Eval-Agent**: MCP server providing browser automation and GitHub integration
4. **Graph-Sitter**: Code analysis engine for repository structure visualization
5. **External Integrations**: Codegen API, GitHub API, and deployment platforms

## 🔄 CI/CD Workflow Integration

The platform integrates seamlessly into modern development workflows:

```mermaid
graph LR
    A[Code Push] --> B[GitHub PR]
    B --> C[Deploy Preview]
    C --> D[Web-Eval-Agent]
    D --> E[Automated Testing]
    E --> F[Quality Report]
    F --> G[Approval/Merge]
    G --> H[Production Deploy]
    H --> I[Post-Deploy Validation]
```

### Web-Eval-Agent Role in CI/CD

1. **PR Creation**: Automatically triggered when PRs are opened
2. **Deployment Detection**: Identifies preview deployment URLs
3. **Automated Testing**: Runs comprehensive UI/UX evaluation
4. **Report Generation**: Creates detailed testing reports with screenshots
5. **Quality Gates**: Provides pass/fail recommendations for merge decisions
6. **Post-Deploy Validation**: Verifies production deployments

## 📋 Prerequisites

- **Node.js 18+** and npm
- **Python 3.11+** (for web-eval-agent integration)
- **Codegen API token** (get one from [Codegen Dashboard](https://app.codegen.com/settings))
- **Google Gemini API key** (for web evaluation features)
- **GitHub token** (for GitHub integration features)

## 🛠️ Installation & Setup

### 1. Clone the repository

```bash
git clone https://github.com/Zeeeepa/codegenApp.git
cd codegenApp
```

### 2. Install dependencies

```bash
npm install
```

### 3. Environment Configuration

Create a `.env` file in the project root:

```bash
# Codegen API Configuration
REACT_APP_API_TOKEN=your_codegen_api_token_here
REACT_APP_DEFAULT_ORGANIZATION=your_org_id_here
REACT_APP_API_BASE_URL=https://api.codegen.com
REACT_APP_USER_ID=your_user_id_here

# Web-Eval-Agent Configuration
GEMINI_API_KEY=your_gemini_api_key_here
GITHUB_TOKEN=your_github_token_here
WEB_EVAL_MCP_PATH=web-eval-agent
WEB_EVAL_TIMEOUT=300000
WEB_EVAL_MAX_CONCURRENT=3

# Optional: Deployment Configuration
NETLIFY_AUTH_TOKEN=your_netlify_token_here
NETLIFY_SITE_ID=your_netlify_site_id_here
```

### 4. Install Web-Eval-Agent Dependencies

```bash
# Install Python dependencies
pip install playwright python-dotenv
playwright install chromium

# Clone web-eval-agent (if not already available)
git clone https://github.com/Zeeeepa/web-eval-agent.git ../web-eval-agent
cd ../web-eval-agent
pip install -r requirements.txt
cd ../codegenApp
```

### 5. Start the development environment

```bash
# Start both frontend and backend
npm run dev

# Or start individually:
npm start              # Frontend only
npm run server:dev     # Backend only
```

The application will be available at:
- **Frontend**: `http://localhost:8000`
- **Backend API**: `http://localhost:3001`

## 🔧 Development

### Available Scripts

#### Core Application
- `npm start` - Start React development server (port 8000)
- `npm run build` - Build React app for production
- `npm test` - Run React test suite
- `npm run dev` - Start both frontend and backend concurrently

#### Backend Server
- `npm run server:start` - Start production server
- `npm run server:dev` - Start development server with hot reload
- `npm run server:test` - Run backend tests

#### Web-Eval-Agent Testing
- `npm run test:web-eval` - Run web-eval-agent integration tests
- `npm run test:web-eval:watch` - Run tests in watch mode
- `npm run test:web-eval:coverage` - Run tests with coverage report
- `npm run test:all` - Run all test suites

#### Quality Assurance
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript type checking
- `npm run format` - Format code with Prettier

### Project Structure

```
codegenApp/
├── public/                     # Static assets
│   ├── manifest.json          # PWA manifest
│   ├── favicon.ico            # App icon
│   └── logo*.png              # App logos
├── src/                       # React source code
│   ├── api/                   # API client and types
│   ├── components/            # React components
│   │   ├── WebEvalPanel.tsx   # Web evaluation interface
│   │   └── ...                # Other UI components
│   ├── hooks/                 # Custom React hooks
│   │   ├── useWebEval.ts      # Web evaluation hook
│   │   └── ...                # Other hooks
│   ├── utils/                 # Utility functions
│   ├── storage/               # Local storage utilities
│   └── *.tsx                  # Main React components
├── server/                    # Backend proxy server
│   ├── index.js               # Main server file
│   ├── web-eval-routes.js     # Web evaluation API routes
│   └── package.json           # Server dependencies
├── tests/                     # Test suites
│   └── web-eval-agent/        # Web evaluation tests
│       ├── unit/              # Unit tests
│       ├── integration/       # Integration tests
│       ├── e2e/               # End-to-end tests
│       ├── fixtures/          # Test data
│       └── mocks/             # Mock implementations
├── .github/                   # GitHub workflows
│   └── workflows/             # CI/CD pipelines
│       └── web-eval-pr.yml    # PR testing workflow
├── .env                       # Environment variables
└── README.md                  # This documentation
```

## ⚙️ Configuration

The application supports multiple configuration methods:

1. **Environment Variables** (recommended): Set `REACT_APP_*` variables in `.env` file
2. **Settings Page**: Configure credentials through the web interface
3. **LocalStorage**: Automatically saves settings for future sessions

### Environment Variable Validation

The Settings page will show the status of your environment variables:

- ✅ **Green**: All required variables are set
- ⚠️ **Yellow**: Optional variables missing (warnings)
- ❌ **Red**: Required variables missing (will prevent API calls)

## 🚀 Deployment

### Frontend Deployment

The React app can be deployed to any static hosting service:

#### Vercel
```bash
npm run build
# Deploy the 'build' folder to Vercel
```

#### Netlify
```bash
npm run build
# Deploy the 'build' folder to Netlify
```

#### GitHub Pages
```bash
npm run build
# Deploy the 'build' folder to GitHub Pages
```

### Environment Variables for Production

Set these environment variables in your hosting platform:

```env
REACT_APP_API_TOKEN=your_production_api_token
REACT_APP_DEFAULT_ORGANIZATION=your_org_id
REACT_APP_API_BASE_URL=https://api.codegen.com
REACT_APP_USER_ID=your_user_id
```

## 🔐 Authentication

1. Get your API token from the [Codegen Dashboard](https://app.codegen.com/settings)
2. Add it to your `.env` file or enter it in the application's Settings page
3. The application will validate your credentials and load your organizations

## 🧪 Testing

Run the test suite to ensure everything is working correctly:

```bash
npm test
```

The test suite includes:
- Environment variable validation tests
- Component rendering tests
- API configuration tests

## 🐛 Troubleshooting

### Missing Environment Variables

If you see errors about missing environment variables:

1. Ensure your `.env` file is in the project root
2. Restart the development server after creating/modifying `.env`
3. Check the Settings page for validation status

### API Connection Issues

If API calls are failing:

1. Verify your API token is correct
2. Check that the API base URL is accessible (`https://api.codegen.com`)
3. Ensure your organization ID is valid
4. Check browser console for detailed error messages

### Development Server Issues

- Make sure port 3000 is available
- Try restarting the server: `npm start`
- Check the console for detailed error messages

## 📝 API Token Setup

1. Visit [Codegen Dashboard](https://app.codegen.com/settings)
2. Navigate to API settings
3. Generate a new API token
4. Copy the token and add it to your `.env` file or Settings page

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/amazing-feature`
3. Commit your changes: `git commit -m 'Add amazing feature'`
4. Push to the branch: `git push origin feature/amazing-feature`
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🆘 Support

If you encounter any issues:

1. Check the troubleshooting section above
2. Look for existing issues in the GitHub repository
3. Create a new issue with detailed information about the problem

## 🔄 Updates

To update the application:

```bash
git pull origin main
npm install  # Updates dependencies
npm start    # Restart the development server
```
