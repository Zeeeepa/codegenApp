name: CodegenApp Validation Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to validate'
        required: true
        type: string

env:
  CODEGEN_API_TOKEN: ${{ secrets.CODEGEN_API_TOKEN }}
  CODEGEN_ORG_ID: ${{ secrets.CODEGEN_ORG_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_WORKER_URL: ${{ secrets.CLOUDFLARE_WORKER_URL }}
  GITHUB_REPO: ${{ github.repository }}

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r deploy-requirements.txt
        pip install -r backend/requirements.txt
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run deployment tests
      run: python test_deployment.py
    
    - name: Build frontend
      run: npm run build
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
    
    - name: Run validation pipeline
      id: validation
      run: |
        PR_NUMBER="${{ github.event.pull_request.number || github.event.inputs.pr_number }}"
        echo "Running validation for PR #$PR_NUMBER"
        python deploy.py validate-pr $PR_NUMBER > validation_result.json
        cat validation_result.json
        
        # Check if validation was successful
        SUCCESS=$(python -c "import json; data=json.load(open('validation_result.json')); print(data.get('success', False))")
        echo "validation_success=$SUCCESS" >> $GITHUB_OUTPUT
        
        if [ "$SUCCESS" = "True" ]; then
          echo "‚úÖ Validation pipeline completed successfully"
        else
          echo "‚ùå Validation pipeline failed"
          exit 1
        fi
    
    - name: Upload validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-results
        path: |
          validation_result.json
          /tmp/web-eval-*.json
          /tmp/deployment-*.log
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const prNumber = context.payload.pull_request.number;
          
          let validationResult;
          try {
            validationResult = JSON.parse(fs.readFileSync('validation_result.json', 'utf8'));
          } catch (error) {
            validationResult = { success: false, error: 'Failed to read validation results' };
          }
          
          const success = validationResult.success;
          const emoji = success ? '‚úÖ' : '‚ùå';
          const status = success ? 'PASSED' : 'FAILED';
          
          const comment = `## ${emoji} CodegenApp Validation Pipeline ${status}
          
          **PR #${prNumber} Validation Results:**
          
          ${success ? 
            `üéâ All validation stages completed successfully!
            
            **Stages Completed:**
            - ‚úÖ Snapshot Creation
            - ‚úÖ Code Deployment  
            - ‚úÖ Deployment Validation
            - ‚úÖ Web Evaluation Testing
            - ‚úÖ Final Validation
            
            **Next Steps:**
            - Ready for manual review and merge
            - All automated checks have passed` :
            `‚ùå Validation failed at stage: ${validationResult.stage || 'unknown'}
            
            **Error Details:**
            \`\`\`
            ${validationResult.error || 'Unknown error occurred'}
            \`\`\`
            
            **Next Steps:**
            - Review the error details above
            - Fix the issues in your code
            - Push updates to trigger re-validation`
          }
          
          **Validation Details:**
          \`\`\`json
          ${JSON.stringify(validationResult, null, 2)}
          \`\`\`
          
          ---
          *This comment was automatically generated by the CodegenApp Validation Pipeline*`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deploy-web-eval-agent:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'opened')
    
    steps:
    - name: Checkout web-eval-agent
      uses: actions/checkout@v4
      with:
        repository: Zeeeepa/web-eval-agent
        token: ${{ secrets.GITHUB_TOKEN }}
        path: web-eval-agent
    
    - name: Set up Python for web-eval-agent
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install web-eval-agent dependencies
      run: |
        cd web-eval-agent
        pip install -r requirements.txt
    
    - name: Deploy web-eval-agent
      run: |
        cd web-eval-agent
        echo "üöÄ Deploying web-eval-agent..."
        # Add deployment commands here
        echo "‚úÖ Web-eval-agent deployed successfully"

  deploy-grainchain:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'opened')
    
    steps:
    - name: Checkout grainchain
      uses: actions/checkout@v4
      with:
        repository: Zeeeepa/grainchain
        token: ${{ secrets.GITHUB_TOKEN }}
        path: grainchain
    
    - name: Set up Python for grainchain
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install grainchain dependencies
      run: |
        cd grainchain
        pip install -e .
    
    - name: Deploy grainchain with graph-sitter
      run: |
        cd grainchain
        echo "üöÄ Deploying grainchain with graph-sitter..."
        # Add deployment commands here
        echo "‚úÖ Grainchain deployed successfully"
