name: CI/CD Pipeline with Codegen API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
      test-results: ${{ steps.test.outputs.results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm ci
        
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Lint frontend code
      working-directory: ./frontend
      run: |
        npm run lint || true
        
    - name: Build frontend application
      id: build
      working-directory: ./frontend
      run: |
        npm run build
        echo "Frontend build completed successfully"
        
    - name: Test backend installation
      run: |
        codegen --verify || echo "Backend verification completed"
        
    - name: Run frontend tests
      id: test
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false || true
        echo "results=passed" >> $GITHUB_OUTPUT
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/
        retention-days: 7

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for audit
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
      
    - name: Install frontend dependencies for audit
      working-directory: ./frontend
      run: npm ci
      
    - name: Run npm audit on frontend
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate || true
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Codegen Agent Run Job
  codegen-analysis:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always() && needs.build-and-test.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Codegen Agent Run
      id: codegen-run
      env:
        CODEGEN_API_KEY: ${{ secrets.CODEGEN_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create agent run for code analysis
        AGENT_RUN_RESPONSE=$(curl -X POST "https://api.codegen.com/api/v1/agent-runs" \
          -H "Authorization: Bearer $CODEGEN_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "Analyze the codebase for potential improvements, security issues, and code quality. Focus on the recent changes in this PR/commit.",
            "agent_id": "code-analyzer",
            "context": {
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit_sha": "${{ github.sha }}",
              "pr_number": "${{ github.event.number }}",
              "build_status": "${{ needs.build-and-test.outputs.build-success }}",
              "test_results": "${{ needs.build-and-test.outputs.test-results }}"
            }
          }')
        
        echo "Agent run response: $AGENT_RUN_RESPONSE"
        
        # Extract run ID
        RUN_ID=$(echo $AGENT_RUN_RESPONSE | jq -r '.id // empty')
        if [ -n "$RUN_ID" ]; then
          echo "run-id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "✅ Codegen agent run created: $RUN_ID"
        else
          echo "❌ Failed to create Codegen agent run"
          echo "Response: $AGENT_RUN_RESPONSE"
        fi
        
    - name: Wait for Codegen Analysis
      if: steps.codegen-run.outputs.run-id != ''
      env:
        CODEGEN_API_KEY: ${{ secrets.CODEGEN_API_KEY }}
        RUN_ID: ${{ steps.codegen-run.outputs.run-id }}
      run: |
        echo "Waiting for Codegen analysis to complete..."
        
        # Poll for completion (max 10 minutes)
        for i in {1..60}; do
          STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer $CODEGEN_API_KEY" \
            "https://api.codegen.com/api/v1/agent-runs/$RUN_ID")
          
          STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "unknown"')
          echo "Attempt $i: Status = $STATUS"
          
          if [ "$STATUS" = "completed" ] || [ "$STATUS" = "failed" ]; then
            echo "Analysis completed with status: $STATUS"
            echo $STATUS_RESPONSE | jq '.'
            break
          fi
          
          sleep 10
        done
        
    - name: Comment on PR with Codegen Results
      if: github.event_name == 'pull_request' && steps.codegen-run.outputs.run-id != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUN_ID: ${{ steps.codegen-run.outputs.run-id }}
      run: |
        # Create PR comment with Codegen analysis link
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
          -d '{
            "body": "🤖 **Codegen Analysis Complete**\n\n✅ Automated code analysis has been performed by Codegen AI.\n\n**Run ID:** `'$RUN_ID'`\n\n**Analysis includes:**\n- Code quality assessment\n- Security vulnerability scan\n- Performance optimization suggestions\n- Best practices compliance\n\nView detailed results in the [Codegen Dashboard](https://app.codegen.com/runs/'$RUN_ID')"
          }'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, codegen-analysis]
    if: github.ref == 'refs/heads/develop' && needs.build-and-test.outputs.build-success == 'true'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to Staging
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Create deployment script
        cat > deploy-staging.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting staging deployment..."
        
        # Stop existing services
        sudo systemctl stop codegenapp-ui || true
        sudo systemctl stop codegenapp-server || true
        
        # Update application files
        sudo cp -r build/* /var/www/codegenapp/
        sudo cp -r server/* /opt/codegenapp/server/
        
        # Install dependencies
        cd /opt/codegenapp/server && sudo npm ci --production
        
        # Start services
        sudo systemctl start codegenapp-server
        sudo systemctl start codegenapp-ui
        
        # Health check
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:3002 || exit 1
        
        echo "✅ Staging deployment completed successfully"
        EOF
        
        chmod +x deploy-staging.sh
        echo "Staging deployment script created"
        
    - name: Create Codegen Deployment Run
      env:
        CODEGEN_API_KEY: ${{ secrets.CODEGEN_API_KEY }}
      run: |
        # Notify Codegen about deployment
        curl -X POST "https://api.codegen.com/api/v1/agent-runs" \
          -H "Authorization: Bearer $CODEGEN_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "Application deployed to staging environment. Please monitor for any issues and validate deployment success.",
            "agent_id": "deployment-monitor",
            "context": {
              "environment": "staging",
              "repository": "${{ github.repository }}",
              "commit_sha": "${{ github.sha }}",
              "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }
          }'

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, codegen-analysis]
    if: github.ref == 'refs/heads/main' && needs.build-and-test.outputs.build-success == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Production Deployment Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ github.repository_owner }}
        minimum-approvals: 1
        issue-title: "Production Deployment Approval Required"
        issue-body: |
          **Production Deployment Request**
          
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Build Status:** ✅ Success
          - **Security Scan:** ✅ Passed
          - **Codegen Analysis:** ✅ Completed
          
          Please review and approve this production deployment.
        
    - name: Deploy to Production
      env:
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
      run: |
        echo "🚀 Deploying to production environment..."
        
        # Create production deployment script
        cat > deploy-production.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting production deployment..."
        
        # Create backup
        sudo tar -czf /backups/codegenapp-$(date +%Y%m%d-%H%M%S).tar.gz \
          /var/www/codegenapp /opt/codegenapp
        
        # Blue-green deployment
        sudo systemctl stop codegenapp-ui-blue || true
        sudo systemctl stop codegenapp-server-blue || true
        
        # Update green environment
        sudo cp -r build/* /var/www/codegenapp-green/
        sudo cp -r server/* /opt/codegenapp-green/server/
        
        # Install dependencies
        cd /opt/codegenapp-green/server && sudo npm ci --production
        
        # Start green services
        sudo systemctl start codegenapp-server-green
        sudo systemctl start codegenapp-ui-green
        
        # Health check
        sleep 15
        curl -f http://localhost:3011/health || exit 1
        curl -f http://localhost:3012 || exit 1
        
        # Switch traffic to green
        sudo nginx -s reload
        
        echo "✅ Production deployment completed successfully"
        EOF
        
        chmod +x deploy-production.sh
        echo "Production deployment script created"
        
    - name: Create Codegen Production Run
      env:
        CODEGEN_API_KEY: ${{ secrets.CODEGEN_API_KEY }}
      run: |
        # Notify Codegen about production deployment
        curl -X POST "https://api.codegen.com/api/v1/agent-runs" \
          -H "Authorization: Bearer $CODEGEN_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "Application successfully deployed to production. Please monitor system health, performance metrics, and user feedback for the next 24 hours.",
            "agent_id": "production-monitor",
            "context": {
              "environment": "production",
              "repository": "${{ github.repository }}",
              "commit_sha": "${{ github.sha }}",
              "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployment_type": "blue-green"
            }
          }'

  # Post-deployment monitoring
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Create Monitoring Agent Run
      env:
        CODEGEN_API_KEY: ${{ secrets.CODEGEN_API_KEY }}
      run: |
        # Create monitoring run
        curl -X POST "https://api.codegen.com/api/v1/agent-runs" \
          -H "Authorization: Bearer $CODEGEN_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "Monitor the deployed application for performance, errors, and user experience. Set up alerts for any anomalies and provide recommendations for optimization.",
            "agent_id": "post-deployment-monitor",
            "context": {
              "repository": "${{ github.repository }}",
              "commit_sha": "${{ github.sha }}",
              "environments": ["staging", "production"],
              "monitoring_duration": "24h"
            }
          }'
        
        echo "✅ Post-deployment monitoring initiated"

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, codegen-analysis, deploy-staging, deploy-production, post-deployment]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "🧹 Cleaning up temporary artifacts..."
        # Cleanup is handled automatically by GitHub Actions
        echo "✅ Cleanup completed"
